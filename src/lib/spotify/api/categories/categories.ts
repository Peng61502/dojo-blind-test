/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ForbiddenResponse,
  GetACategoriesPlaylistsParams,
  GetACategoryParams,
  GetCategoriesParams,
  OneCategoryResponse,
  PagedCategoriesResponse,
  PagedFeaturedPlaylistsResponse,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get Several Browse Categories

 */
export const getCategories = (
    params?: GetCategoriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedCategoriesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetCategoriesKey = (params?: GetCategoriesParams,) => [`https://api.spotify.com/v1/browse/categories`, ...(params ? [params]: [])] as const;

    
export type GetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCategories>>>
export type GetCategoriesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Browse Categories

 */
export const useGetCategories = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetCategoriesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCategories>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCategoriesKey(params) : null);
  const swrFn = () => getCategories(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a single category used to tag items in Spotify (on, for example, the Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get Single Browse Category

 */
export const getACategory = (
    categoryId: string,
    params?: GetACategoryParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneCategoryResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/categories/${categoryId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetACategoryKey = (categoryId: string,
    params?: GetACategoryParams,) => [`https://api.spotify.com/v1/browse/categories/${categoryId}`, ...(params ? [params]: [])] as const;

    
export type GetACategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getACategory>>>
export type GetACategoryQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Single Browse Category

 */
export const useGetACategory = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 categoryId: string,
    params?: GetACategoryParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getACategory>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(categoryId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetACategoryKey(categoryId,params) : null);
  const swrFn = () => getACategory(categoryId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of Spotify playlists tagged with a particular category.

 * @summary Get Category's Playlists

 */
export const getACategoriesPlaylists = (
    categoryId: string,
    params?: GetACategoriesPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedFeaturedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/categories/${categoryId}/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetACategoriesPlaylistsKey = (categoryId: string,
    params?: GetACategoriesPlaylistsParams,) => [`https://api.spotify.com/v1/browse/categories/${categoryId}/playlists`, ...(params ? [params]: [])] as const;

    
export type GetACategoriesPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getACategoriesPlaylists>>>
export type GetACategoriesPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Category's Playlists

 */
export const useGetACategoriesPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 categoryId: string,
    params?: GetACategoriesPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getACategoriesPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(categoryId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetACategoriesPlaylistsKey(categoryId,params) : null);
  const swrFn = () => getACategoriesPlaylists(categoryId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


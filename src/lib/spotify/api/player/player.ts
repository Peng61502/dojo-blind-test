/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  AddToQueueParams,
  CursorPagedPlayHistoryResponse,
  ForbiddenResponse,
  GetInformationAboutTheUsersCurrentPlaybackParams,
  GetRecentlyPlayedParams,
  GetTheUsersCurrentlyPlayingTrackParams,
  ManyDevicesResponse,
  OneCurrentlyPlayingResponse,
  OneCurrentlyPlayingTrackResponse,
  PauseAUsersPlaybackParams,
  QueueResponse,
  SeekToPositionInCurrentlyPlayingTrackParams,
  SetRepeatModeOnUsersPlaybackParams,
  SetVolumeForUsersPlaybackParams,
  SkipUsersPlaybackToNextTrackParams,
  SkipUsersPlaybackToPreviousTrackParams,
  StartAUsersPlaybackBody,
  StartAUsersPlaybackParams,
  ToggleShuffleForUsersPlaybackParams,
  TooManyRequestsResponse,
  TransferAUsersPlaybackBody,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get information about the user‚Äôs current playback state, including track or episode, progress, and active device.

 * @summary Get Playback State

 */
export const getInformationAboutTheUsersCurrentPlayback = (
    params?: GetInformationAboutTheUsersCurrentPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneCurrentlyPlayingResponse | void>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/player`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetInformationAboutTheUsersCurrentPlaybackKey = (params?: GetInformationAboutTheUsersCurrentPlaybackParams,) => [`https://api.spotify.com/v1/me/player`, ...(params ? [params]: [])] as const;

export type GetInformationAboutTheUsersCurrentPlaybackQueryResult = NonNullable<Awaited<ReturnType<typeof getInformationAboutTheUsersCurrentPlayback>>>
export type GetInformationAboutTheUsersCurrentPlaybackQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Playback State

 */
export const useGetInformationAboutTheUsersCurrentPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetInformationAboutTheUsersCurrentPlaybackParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getInformationAboutTheUsersCurrentPlayback>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetInformationAboutTheUsersCurrentPlaybackKey(params) : null);
  const swrFn = () => getInformationAboutTheUsersCurrentPlayback(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Transfer playback to a new device and determine if it should start playing.

 * @summary Transfer Playback

 */
export const transferAUsersPlayback = (
    transferAUsersPlaybackBody: TransferAUsersPlaybackBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player`,
      transferAUsersPlaybackBody,options
    );
  }



export const getTransferAUsersPlaybackMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: TransferAUsersPlaybackBody }): Promise<AxiosResponse<void>> => {
    return transferAUsersPlayback(arg, options);
  }
}
export const getTransferAUsersPlaybackMutationKey = () => [`https://api.spotify.com/v1/me/player`] as const;

export type TransferAUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof transferAUsersPlayback>>>
export type TransferAUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Transfer Playback

 */
export const useTransferAUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof transferAUsersPlayback>>, TError, Key, TransferAUsersPlaybackBody, Awaited<ReturnType<typeof transferAUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getTransferAUsersPlaybackMutationKey();
  const swrFn = getTransferAUsersPlaybackMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get information about a user‚Äôs available devices.

 * @summary Get Available Devices

 */
export const getAUsersAvailableDevices = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyDevicesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/player/devices`,options
    );
  }



export const getGetAUsersAvailableDevicesKey = () => [`https://api.spotify.com/v1/me/player/devices`] as const;

export type GetAUsersAvailableDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof getAUsersAvailableDevices>>>
export type GetAUsersAvailableDevicesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Available Devices

 */
export const useGetAUsersAvailableDevices = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAUsersAvailableDevices>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAUsersAvailableDevicesKey() : null);
  const swrFn = () => getAUsersAvailableDevices(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get the object currently being played on the user's Spotify account.

 * @summary Get Currently Playing Track

 */
export const getTheUsersCurrentlyPlayingTrack = (
    params?: GetTheUsersCurrentlyPlayingTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneCurrentlyPlayingTrackResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/player/currently-playing`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetTheUsersCurrentlyPlayingTrackKey = (params?: GetTheUsersCurrentlyPlayingTrackParams,) => [`https://api.spotify.com/v1/me/player/currently-playing`, ...(params ? [params]: [])] as const;

export type GetTheUsersCurrentlyPlayingTrackQueryResult = NonNullable<Awaited<ReturnType<typeof getTheUsersCurrentlyPlayingTrack>>>
export type GetTheUsersCurrentlyPlayingTrackQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Currently Playing Track

 */
export const useGetTheUsersCurrentlyPlayingTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetTheUsersCurrentlyPlayingTrackParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTheUsersCurrentlyPlayingTrack>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTheUsersCurrentlyPlayingTrackKey(params) : null);
  const swrFn = () => getTheUsersCurrentlyPlayingTrack(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Start a new context or resume current playback on the user's active device.

 * @summary Start/Resume Playback

 */
export const startAUsersPlayback = (
    startAUsersPlaybackBody: StartAUsersPlaybackBody,
    params?: StartAUsersPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/play`,
      startAUsersPlaybackBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getStartAUsersPlaybackMutationFetcher = (params?: StartAUsersPlaybackParams, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: StartAUsersPlaybackBody }): Promise<AxiosResponse<void>> => {
    return startAUsersPlayback(arg, params, options);
  }
}
export const getStartAUsersPlaybackMutationKey = (params?: StartAUsersPlaybackParams,) => [`https://api.spotify.com/v1/me/player/play`, ...(params ? [params]: [])] as const;

export type StartAUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof startAUsersPlayback>>>
export type StartAUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Start/Resume Playback

 */
export const useStartAUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: StartAUsersPlaybackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof startAUsersPlayback>>, TError, Key, StartAUsersPlaybackBody, Awaited<ReturnType<typeof startAUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getStartAUsersPlaybackMutationKey(params);
  const swrFn = getStartAUsersPlaybackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Pause playback on the user's account.

 * @summary Pause Playback

 */
export const pauseAUsersPlayback = (
    params?: PauseAUsersPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/pause`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getPauseAUsersPlaybackMutationFetcher = (params?: PauseAUsersPlaybackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return pauseAUsersPlayback(params, options);
  }
}
export const getPauseAUsersPlaybackMutationKey = (params?: PauseAUsersPlaybackParams,) => [`https://api.spotify.com/v1/me/player/pause`, ...(params ? [params]: [])] as const;

export type PauseAUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof pauseAUsersPlayback>>>
export type PauseAUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Pause Playback

 */
export const usePauseAUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: PauseAUsersPlaybackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof pauseAUsersPlayback>>, TError, Key, Arguments, Awaited<ReturnType<typeof pauseAUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPauseAUsersPlaybackMutationKey(params);
  const swrFn = getPauseAUsersPlaybackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Skips to next track in the user‚Äôs queue.

 * @summary Skip To Next

 */
export const skipUsersPlaybackToNextTrack = (
    params?: SkipUsersPlaybackToNextTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `https://api.spotify.com/v1/me/player/next`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSkipUsersPlaybackToNextTrackMutationFetcher = (params?: SkipUsersPlaybackToNextTrackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return skipUsersPlaybackToNextTrack(params, options);
  }
}
export const getSkipUsersPlaybackToNextTrackMutationKey = (params?: SkipUsersPlaybackToNextTrackParams,) => [`https://api.spotify.com/v1/me/player/next`, ...(params ? [params]: [])] as const;

export type SkipUsersPlaybackToNextTrackMutationResult = NonNullable<Awaited<ReturnType<typeof skipUsersPlaybackToNextTrack>>>
export type SkipUsersPlaybackToNextTrackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Skip To Next

 */
export const useSkipUsersPlaybackToNextTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: SkipUsersPlaybackToNextTrackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skipUsersPlaybackToNextTrack>>, TError, Key, Arguments, Awaited<ReturnType<typeof skipUsersPlaybackToNextTrack>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkipUsersPlaybackToNextTrackMutationKey(params);
  const swrFn = getSkipUsersPlaybackToNextTrackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Skips to previous track in the user‚Äôs queue.

 * @summary Skip To Previous

 */
export const skipUsersPlaybackToPreviousTrack = (
    params?: SkipUsersPlaybackToPreviousTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `https://api.spotify.com/v1/me/player/previous`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSkipUsersPlaybackToPreviousTrackMutationFetcher = (params?: SkipUsersPlaybackToPreviousTrackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return skipUsersPlaybackToPreviousTrack(params, options);
  }
}
export const getSkipUsersPlaybackToPreviousTrackMutationKey = (params?: SkipUsersPlaybackToPreviousTrackParams,) => [`https://api.spotify.com/v1/me/player/previous`, ...(params ? [params]: [])] as const;

export type SkipUsersPlaybackToPreviousTrackMutationResult = NonNullable<Awaited<ReturnType<typeof skipUsersPlaybackToPreviousTrack>>>
export type SkipUsersPlaybackToPreviousTrackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Skip To Previous

 */
export const useSkipUsersPlaybackToPreviousTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: SkipUsersPlaybackToPreviousTrackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof skipUsersPlaybackToPreviousTrack>>, TError, Key, Arguments, Awaited<ReturnType<typeof skipUsersPlaybackToPreviousTrack>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSkipUsersPlaybackToPreviousTrackMutationKey(params);
  const swrFn = getSkipUsersPlaybackToPreviousTrackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Seeks to the given position in the user‚Äôs currently playing track.

 * @summary Seek To Position

 */
export const seekToPositionInCurrentlyPlayingTrack = (
    params: SeekToPositionInCurrentlyPlayingTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/seek`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSeekToPositionInCurrentlyPlayingTrackMutationFetcher = (params: SeekToPositionInCurrentlyPlayingTrackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return seekToPositionInCurrentlyPlayingTrack(params, options);
  }
}
export const getSeekToPositionInCurrentlyPlayingTrackMutationKey = (params: SeekToPositionInCurrentlyPlayingTrackParams,) => [`https://api.spotify.com/v1/me/player/seek`, ...(params ? [params]: [])] as const;

export type SeekToPositionInCurrentlyPlayingTrackMutationResult = NonNullable<Awaited<ReturnType<typeof seekToPositionInCurrentlyPlayingTrack>>>
export type SeekToPositionInCurrentlyPlayingTrackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Seek To Position

 */
export const useSeekToPositionInCurrentlyPlayingTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: SeekToPositionInCurrentlyPlayingTrackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof seekToPositionInCurrentlyPlayingTrack>>, TError, Key, Arguments, Awaited<ReturnType<typeof seekToPositionInCurrentlyPlayingTrack>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSeekToPositionInCurrentlyPlayingTrackMutationKey(params);
  const swrFn = getSeekToPositionInCurrentlyPlayingTrackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Set the repeat mode for the user's playback. Options are repeat-track,
repeat-context, and off.

 * @summary Set Repeat Mode

 */
export const setRepeatModeOnUsersPlayback = (
    params: SetRepeatModeOnUsersPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/repeat`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSetRepeatModeOnUsersPlaybackMutationFetcher = (params: SetRepeatModeOnUsersPlaybackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return setRepeatModeOnUsersPlayback(params, options);
  }
}
export const getSetRepeatModeOnUsersPlaybackMutationKey = (params: SetRepeatModeOnUsersPlaybackParams,) => [`https://api.spotify.com/v1/me/player/repeat`, ...(params ? [params]: [])] as const;

export type SetRepeatModeOnUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof setRepeatModeOnUsersPlayback>>>
export type SetRepeatModeOnUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Set Repeat Mode

 */
export const useSetRepeatModeOnUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: SetRepeatModeOnUsersPlaybackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof setRepeatModeOnUsersPlayback>>, TError, Key, Arguments, Awaited<ReturnType<typeof setRepeatModeOnUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSetRepeatModeOnUsersPlaybackMutationKey(params);
  const swrFn = getSetRepeatModeOnUsersPlaybackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Set the volume for the user‚Äôs current playback device.

 * @summary Set Playback Volume

 */
export const setVolumeForUsersPlayback = (
    params: SetVolumeForUsersPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/volume`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSetVolumeForUsersPlaybackMutationFetcher = (params: SetVolumeForUsersPlaybackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return setVolumeForUsersPlayback(params, options);
  }
}
export const getSetVolumeForUsersPlaybackMutationKey = (params: SetVolumeForUsersPlaybackParams,) => [`https://api.spotify.com/v1/me/player/volume`, ...(params ? [params]: [])] as const;

export type SetVolumeForUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof setVolumeForUsersPlayback>>>
export type SetVolumeForUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Set Playback Volume

 */
export const useSetVolumeForUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: SetVolumeForUsersPlaybackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof setVolumeForUsersPlayback>>, TError, Key, Arguments, Awaited<ReturnType<typeof setVolumeForUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSetVolumeForUsersPlaybackMutationKey(params);
  const swrFn = getSetVolumeForUsersPlaybackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Toggle shuffle on or off for user‚Äôs playback.

 * @summary Toggle Playback Shuffle

 */
export const toggleShuffleForUsersPlayback = (
    params: ToggleShuffleForUsersPlaybackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/player/shuffle`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getToggleShuffleForUsersPlaybackMutationFetcher = (params: ToggleShuffleForUsersPlaybackParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return toggleShuffleForUsersPlayback(params, options);
  }
}
export const getToggleShuffleForUsersPlaybackMutationKey = (params: ToggleShuffleForUsersPlaybackParams,) => [`https://api.spotify.com/v1/me/player/shuffle`, ...(params ? [params]: [])] as const;

export type ToggleShuffleForUsersPlaybackMutationResult = NonNullable<Awaited<ReturnType<typeof toggleShuffleForUsersPlayback>>>
export type ToggleShuffleForUsersPlaybackMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Toggle Playback Shuffle

 */
export const useToggleShuffleForUsersPlayback = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: ToggleShuffleForUsersPlaybackParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof toggleShuffleForUsersPlayback>>, TError, Key, Arguments, Awaited<ReturnType<typeof toggleShuffleForUsersPlayback>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getToggleShuffleForUsersPlaybackMutationKey(params);
  const swrFn = getToggleShuffleForUsersPlaybackMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get tracks from the current user's recently played tracks.
_**Note**: Currently doesn't support podcast episodes._

 * @summary Get Recently Played Tracks

 */
export const getRecentlyPlayed = (
    params?: GetRecentlyPlayedParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CursorPagedPlayHistoryResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/player/recently-played`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetRecentlyPlayedKey = (params?: GetRecentlyPlayedParams,) => [`https://api.spotify.com/v1/me/player/recently-played`, ...(params ? [params]: [])] as const;

export type GetRecentlyPlayedQueryResult = NonNullable<Awaited<ReturnType<typeof getRecentlyPlayed>>>
export type GetRecentlyPlayedQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Recently Played Tracks

 */
export const useGetRecentlyPlayed = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetRecentlyPlayedParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getRecentlyPlayed>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetRecentlyPlayedKey(params) : null);
  const swrFn = () => getRecentlyPlayed(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get the list of objects that make up the user's queue.

 * @summary Get the User's Queue

 */
export const getQueue = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QueueResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/player/queue`,options
    );
  }



export const getGetQueueKey = () => [`https://api.spotify.com/v1/me/player/queue`] as const;

export type GetQueueQueryResult = NonNullable<Awaited<ReturnType<typeof getQueue>>>
export type GetQueueQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get the User's Queue

 */
export const useGetQueue = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQueue>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQueueKey() : null);
  const swrFn = () => getQueue(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Add an item to the end of the user's current playback queue.

 * @summary Add Item to Playback Queue

 */
export const addToQueue = (
    params: AddToQueueParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.post(
      `https://api.spotify.com/v1/me/player/queue`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddToQueueMutationFetcher = (params: AddToQueueParams, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
    return addToQueue(params, options);
  }
}
export const getAddToQueueMutationKey = (params: AddToQueueParams,) => [`https://api.spotify.com/v1/me/player/queue`, ...(params ? [params]: [])] as const;

export type AddToQueueMutationResult = NonNullable<Awaited<ReturnType<typeof addToQueue>>>
export type AddToQueueMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Add Item to Playback Queue

 */
export const useAddToQueue = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: AddToQueueParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addToQueue>>, TError, Key, Arguments, Awaited<ReturnType<typeof addToQueue>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddToQueueMutationKey(params);
  const swrFn = getAddToQueueMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ArrayOfBooleansResponse,
  CheckCurrentUserFollowsParams,
  CursorPagedArtistsResponse,
  FollowArtistsUsersBody,
  FollowArtistsUsersParams,
  ForbiddenResponse,
  GetAnArtistsAlbumsParams,
  GetAnArtistsTopTracksParams,
  GetFollowedParams,
  GetMultipleArtistsParams,
  GetUsersTopArtistsParams,
  ManyArtistsResponse,
  ManyTracksResponse,
  OneArtistResponse,
  PagingArtistDiscographyAlbumObjectResponse,
  PagingArtistObjectResponse,
  TooManyRequestsResponse,
  UnauthorizedResponse,
  UnfollowArtistsUsersBody,
  UnfollowArtistsUsersParams
} from '../../model'


  
  /**
 * Get Spotify catalog information for a single artist identified by their unique Spotify ID.

 * @summary Get Artist

 */
export const getAnArtist = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneArtistResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}`,options
    );
  }


export const getGetAnArtistKey = (id: string,) => [`https://api.spotify.com/v1/artists/${id}`] as const;

    
export type GetAnArtistQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtist>>>
export type GetAnArtistQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist

 */
export const useGetAnArtist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtist>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistKey(id) : null);
  const swrFn = () => getAnArtist(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for several artists based on their Spotify IDs.

 * @summary Get Several Artists

 */
export const getMultipleArtists = (
    params: GetMultipleArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyArtistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMultipleArtistsKey = (params: GetMultipleArtistsParams,) => [`https://api.spotify.com/v1/artists`, ...(params ? [params]: [])] as const;

    
export type GetMultipleArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getMultipleArtists>>>
export type GetMultipleArtistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Artists

 */
export const useGetMultipleArtists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetMultipleArtistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getMultipleArtists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetMultipleArtistsKey(params) : null);
  const swrFn = () => getMultipleArtists(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an artist's albums.

 * @summary Get Artist's Albums

 */
export const getAnArtistsAlbums = (
    id: string,
    params?: GetAnArtistsAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingArtistDiscographyAlbumObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnArtistsAlbumsKey = (id: string,
    params?: GetAnArtistsAlbumsParams,) => [`https://api.spotify.com/v1/artists/${id}/albums`, ...(params ? [params]: [])] as const;

    
export type GetAnArtistsAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsAlbums>>>
export type GetAnArtistsAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist's Albums

 */
export const useGetAnArtistsAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnArtistsAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtistsAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistsAlbumsKey(id,params) : null);
  const swrFn = () => getAnArtistsAlbums(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an artist's top tracks by country.

 * @summary Get Artist's Top Tracks

 */
export const getAnArtistsTopTracks = (
    id: string,
    params?: GetAnArtistsTopTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyTracksResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}/top-tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnArtistsTopTracksKey = (id: string,
    params?: GetAnArtistsTopTracksParams,) => [`https://api.spotify.com/v1/artists/${id}/top-tracks`, ...(params ? [params]: [])] as const;

    
export type GetAnArtistsTopTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsTopTracks>>>
export type GetAnArtistsTopTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist's Top Tracks

 */
export const useGetAnArtistsTopTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnArtistsTopTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtistsTopTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistsTopTracksKey(id,params) : null);
  const swrFn = () => getAnArtistsTopTracks(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's listening history.

 * @summary Get Artist's Related Artists

 */
export const getAnArtistsRelatedArtists = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyArtistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}/related-artists`,options
    );
  }


export const getGetAnArtistsRelatedArtistsKey = (id: string,) => [`https://api.spotify.com/v1/artists/${id}/related-artists`] as const;

    
export type GetAnArtistsRelatedArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsRelatedArtists>>>
export type GetAnArtistsRelatedArtistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist's Related Artists

 */
export const useGetAnArtistsRelatedArtists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtistsRelatedArtists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistsRelatedArtistsKey(id) : null);
  const swrFn = () => getAnArtistsRelatedArtists(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's followed artists.

 * @summary Get Followed Artists

 */
export const getFollowed = (
    params: GetFollowedParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CursorPagedArtistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFollowedKey = (params: GetFollowedParams,) => [`https://api.spotify.com/v1/me/following`, ...(params ? [params]: [])] as const;

    
export type GetFollowedQueryResult = NonNullable<Awaited<ReturnType<typeof getFollowed>>>
export type GetFollowedQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Followed Artists

 */
export const useGetFollowed = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetFollowedParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFollowed>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFollowedKey(params) : null);
  const swrFn = () => getFollowed(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Add the current user as a follower of one or more artists or other Spotify users.

 * @summary Follow Artists or Users

 */
export const followArtistsUsers = (
    followArtistsUsersBody: FollowArtistsUsersBody,
    params: FollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/following`,
      followArtistsUsersBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove the current user as a follower of one or more artists or other Spotify users.

 * @summary Unfollow Artists or Users

 */
export const unfollowArtistsUsers = (
    unfollowArtistsUsersBody: UnfollowArtistsUsersBody,
    params: UnfollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/following`,{data:
      unfollowArtistsUsersBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check to see if the current user is following one or more artists or other Spotify users.

 * @summary Check If User Follows Artists or Users

 */
export const checkCurrentUserFollows = (
    params: CheckCurrentUserFollowsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckCurrentUserFollowsKey = (params: CheckCurrentUserFollowsParams,) => [`https://api.spotify.com/v1/me/following/contains`, ...(params ? [params]: [])] as const;

    
export type CheckCurrentUserFollowsQueryResult = NonNullable<Awaited<ReturnType<typeof checkCurrentUserFollows>>>
export type CheckCurrentUserFollowsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check If User Follows Artists or Users

 */
export const useCheckCurrentUserFollows = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckCurrentUserFollowsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkCurrentUserFollows>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckCurrentUserFollowsKey(params) : null);
  const swrFn = () => checkCurrentUserFollows(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top artists based on calculated affinity.

 * @summary Get User's Top Artists

 */
export const getUsersTopArtists = (
    params?: GetUsersTopArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingArtistObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopArtistsKey = (params?: GetUsersTopArtistsParams,) => [`https://api.spotify.com/v1/me/top/artists`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopArtists>>>
export type GetUsersTopArtistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Artists

 */
export const useGetUsersTopArtists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopArtistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopArtists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopArtistsKey(params) : null);
  const swrFn = () => getUsersTopArtists(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  AddTracksToPlaylistBody,
  AddTracksToPlaylistParams,
  ArrayOfBooleansResponse,
  CheckUsersSavedTracksParams,
  ForbiddenResponse,
  GetAnAlbumsTracksParams,
  GetAnArtistsTopTracksParams,
  GetPlaylistsTracksParams,
  GetRecommendationsParams,
  GetSeveralAudioFeaturesParams,
  GetSeveralTracksParams,
  GetTrackParams,
  GetUsersSavedTracksParams,
  GetUsersTopTracksParams,
  ManyAudioFeaturesResponse,
  ManyTracksResponse,
  OneAudioAnalysisResponse,
  OneAudioFeaturesResponse,
  OneRecommendationsResponse,
  OneTrackResponse,
  PagingPlaylistTrackObjectResponse,
  PagingSavedTrackObjectResponse,
  PagingSimplifiedTrackObjectResponse,
  PagingTrackObjectResponse,
  PlaylistSnapshotIdResponse,
  RemoveTracksPlaylistBody,
  RemoveTracksUserBody,
  RemoveTracksUserParams,
  ReorderOrReplacePlaylistsTracksBody,
  ReorderOrReplacePlaylistsTracksParams,
  SaveTracksUserBody,
  SaveTracksUserParams,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get Spotify catalog information about an album‚Äôs tracks.
Optional parameters can be used to limit the number of tracks returned.

 * @summary Get Album Tracks

 */
export const getAnAlbumsTracks = (
    id: string,
    params?: GetAnAlbumsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSimplifiedTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/albums/${id}/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnAlbumsTracksKey = (id: string,
    params?: GetAnAlbumsTracksParams,) => [`https://api.spotify.com/v1/albums/${id}/tracks`, ...(params ? [params]: [])] as const;

    
export type GetAnAlbumsTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getAnAlbumsTracks>>>
export type GetAnAlbumsTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Album Tracks

 */
export const useGetAnAlbumsTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnAlbumsTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnAlbumsTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnAlbumsTracksKey(id,params) : null);
  const swrFn = () => getAnAlbumsTracks(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an artist's top tracks by country.

 * @summary Get Artist's Top Tracks

 */
export const getAnArtistsTopTracks = (
    id: string,
    params?: GetAnArtistsTopTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyTracksResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}/top-tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnArtistsTopTracksKey = (id: string,
    params?: GetAnArtistsTopTracksParams,) => [`https://api.spotify.com/v1/artists/${id}/top-tracks`, ...(params ? [params]: [])] as const;

    
export type GetAnArtistsTopTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsTopTracks>>>
export type GetAnArtistsTopTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist's Top Tracks

 */
export const useGetAnArtistsTopTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnArtistsTopTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtistsTopTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistsTopTracksKey(id,params) : null);
  const swrFn = () => getAnArtistsTopTracks(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for a single track identified by its
unique Spotify ID.

 * @summary Get Track

 */
export const getTrack = (
    id: string,
    params?: GetTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneTrackResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/tracks/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetTrackKey = (id: string,
    params?: GetTrackParams,) => [`https://api.spotify.com/v1/tracks/${id}`, ...(params ? [params]: [])] as const;

    
export type GetTrackQueryResult = NonNullable<Awaited<ReturnType<typeof getTrack>>>
export type GetTrackQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track

 */
export const useGetTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetTrackParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTrack>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTrackKey(id,params) : null);
  const swrFn = () => getTrack(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for multiple tracks based on their Spotify IDs.

 * @summary Get Several Tracks

 */
export const getSeveralTracks = (
    params: GetSeveralTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyTracksResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSeveralTracksKey = (params: GetSeveralTracksParams,) => [`https://api.spotify.com/v1/tracks`, ...(params ? [params]: [])] as const;

    
export type GetSeveralTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getSeveralTracks>>>
export type GetSeveralTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Tracks

 */
export const useGetSeveralTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetSeveralTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSeveralTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSeveralTracksKey(params) : null);
  const swrFn = () => getSeveralTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get full details of the items of a playlist owned by a Spotify user.

 * @summary Get Playlist Items

 */
export const getPlaylistsTracks = (
    playlistId: string,
    params?: GetPlaylistsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingPlaylistTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPlaylistsTracksKey = (playlistId: string,
    params?: GetPlaylistsTracksParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, ...(params ? [params]: [])] as const;

    
export type GetPlaylistsTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaylistsTracks>>>
export type GetPlaylistsTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Playlist Items

 */
export const useGetPlaylistsTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 playlistId: string,
    params?: GetPlaylistsTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPlaylistsTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(playlistId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPlaylistsTracksKey(playlistId,params) : null);
  const swrFn = () => getPlaylistsTracks(playlistId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Add one or more items to a user's playlist.

 * @summary Add Items to Playlist

 */
export const addTracksToPlaylist = (
    playlistId: string,
    addTracksToPlaylistBody: AddTracksToPlaylistBody,
    params?: AddTracksToPlaylistParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.post(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      addTracksToPlaylistBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Either reorder or replace items in a playlist depending on the request's parameters.
To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
To replace items, include `uris` as either a query parameter or in the request's body.
Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
<br/>
**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
These operations can't be applied together in a single request.

 * @summary Update Playlist Items

 */
export const reorderOrReplacePlaylistsTracks = (
    playlistId: string,
    reorderOrReplacePlaylistsTracksBody: ReorderOrReplacePlaylistsTracksBody,
    params?: ReorderOrReplacePlaylistsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      reorderOrReplacePlaylistsTracksBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more items from a user's playlist.

 * @summary Remove Playlist Items

 */
export const removeTracksPlaylist = (
    playlistId: string,
    removeTracksPlaylistBody: RemoveTracksPlaylistBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.delete(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,{data:
      removeTracksPlaylistBody, ...options}
    );
  }


/**
 * Get a list of the songs saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Tracks

 */
export const getUsersSavedTracks = (
    params?: GetUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedTracksKey = (params?: GetUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedTracks>>>
export type GetUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Tracks

 */
export const useGetUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedTracksKey(params) : null);
  const swrFn = () => getUsersSavedTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more tracks to the current user's 'Your Music' library.

 * @summary Save Tracks for Current User

 */
export const saveTracksUser = (
    saveTracksUserBody: SaveTracksUserBody,
    params: SaveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/tracks`,
      saveTracksUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more tracks from the current user's 'Your Music' library.

 * @summary Remove User's Saved Tracks

 */
export const removeTracksUser = (
    removeTracksUserBody: RemoveTracksUserBody,
    params: RemoveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/tracks`,{data:
      removeTracksUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Tracks

 */
export const checkUsersSavedTracks = (
    params: CheckUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedTracksKey = (params: CheckUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedTracks>>>
export type CheckUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Tracks

 */
export const useCheckUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedTracksKey(params) : null);
  const swrFn = () => checkUsersSavedTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get audio features for multiple tracks based on their Spotify IDs.

 * @summary Get Tracks' Audio Features

 */
export const getSeveralAudioFeatures = (
    params: GetSeveralAudioFeaturesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyAudioFeaturesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-features`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSeveralAudioFeaturesKey = (params: GetSeveralAudioFeaturesParams,) => [`https://api.spotify.com/v1/audio-features`, ...(params ? [params]: [])] as const;

    
export type GetSeveralAudioFeaturesQueryResult = NonNullable<Awaited<ReturnType<typeof getSeveralAudioFeatures>>>
export type GetSeveralAudioFeaturesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Tracks' Audio Features

 */
export const useGetSeveralAudioFeatures = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetSeveralAudioFeaturesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSeveralAudioFeatures>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSeveralAudioFeaturesKey(params) : null);
  const swrFn = () => getSeveralAudioFeatures(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get audio feature information for a single track identified by its unique
Spotify ID.

 * @summary Get Track's Audio Features

 */
export const getAudioFeatures = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAudioFeaturesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-features/${id}`,options
    );
  }


export const getGetAudioFeaturesKey = (id: string,) => [`https://api.spotify.com/v1/audio-features/${id}`] as const;

    
export type GetAudioFeaturesQueryResult = NonNullable<Awaited<ReturnType<typeof getAudioFeatures>>>
export type GetAudioFeaturesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track's Audio Features

 */
export const useGetAudioFeatures = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudioFeatures>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudioFeaturesKey(id) : null);
  const swrFn = () => getAudioFeatures(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track‚Äôs structure and musical content, including rhythm, pitch, and timbre.

 * @summary Get Track's Audio Analysis

 */
export const getAudioAnalysis = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAudioAnalysisResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-analysis/${id}`,options
    );
  }


export const getGetAudioAnalysisKey = (id: string,) => [`https://api.spotify.com/v1/audio-analysis/${id}`] as const;

    
export type GetAudioAnalysisQueryResult = NonNullable<Awaited<ReturnType<typeof getAudioAnalysis>>>
export type GetAudioAnalysisQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track's Audio Analysis

 */
export const useGetAudioAnalysis = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudioAnalysis>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudioAnalysisKey(id) : null);
  const swrFn = () => getAudioAnalysis(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.

 * @summary Get Recommendations

 */
export const getRecommendations = (
    params?: GetRecommendationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneRecommendationsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/recommendations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRecommendationsKey = (params?: GetRecommendationsParams,) => [`https://api.spotify.com/v1/recommendations`, ...(params ? [params]: [])] as const;

    
export type GetRecommendationsQueryResult = NonNullable<Awaited<ReturnType<typeof getRecommendations>>>
export type GetRecommendationsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Recommendations

 */
export const useGetRecommendations = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetRecommendationsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getRecommendations>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetRecommendationsKey(params) : null);
  const swrFn = () => getRecommendations(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top tracks based on calculated affinity.

 * @summary Get User's Top Tracks

 */
export const getUsersTopTracks = (
    params?: GetUsersTopTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopTracksKey = (params?: GetUsersTopTracksParams,) => [`https://api.spotify.com/v1/me/top/tracks`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopTracks>>>
export type GetUsersTopTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Tracks

 */
export const useGetUsersTopTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopTracksKey(params) : null);
  const swrFn = () => getUsersTopTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


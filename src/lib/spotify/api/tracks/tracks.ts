/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  ArrayOfBooleansResponse,
  CheckUsersSavedTracksParams,
  ForbiddenResponse,
  GetRecommendationsParams,
  GetSeveralAudioFeaturesParams,
  GetSeveralTracksParams,
  GetTrackParams,
  GetUsersSavedTracksParams,
  ManyAudioFeaturesResponse,
  ManyTracksResponse,
  OneAudioAnalysisResponse,
  OneAudioFeaturesResponse,
  OneRecommendationsResponse,
  OneTrackResponse,
  PagingSavedTrackObjectResponse,
  RemoveTracksUserBody,
  RemoveTracksUserParams,
  SaveTracksUserBody,
  SaveTracksUserParams,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get Spotify catalog information for a single track identified by its
unique Spotify ID.

 * @summary Get Track

 */
export const getTrack = (
    id: string,
    params?: GetTrackParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneTrackResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/tracks/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetTrackKey = (id: string,
    params?: GetTrackParams,) => [`https://api.spotify.com/v1/tracks/${id}`, ...(params ? [params]: [])] as const;

export type GetTrackQueryResult = NonNullable<Awaited<ReturnType<typeof getTrack>>>
export type GetTrackQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track

 */
export const useGetTrack = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  id: string,
    params?: GetTrackParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTrack>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTrackKey(id,params) : null);
  const swrFn = () => getTrack(id,params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get Spotify catalog information for multiple tracks based on their Spotify IDs.

 * @summary Get Several Tracks

 */
export const getSeveralTracks = (
    params: GetSeveralTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyTracksResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetSeveralTracksKey = (params: GetSeveralTracksParams,) => [`https://api.spotify.com/v1/tracks`, ...(params ? [params]: [])] as const;

export type GetSeveralTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getSeveralTracks>>>
export type GetSeveralTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Tracks

 */
export const useGetSeveralTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: GetSeveralTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSeveralTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSeveralTracksKey(params) : null);
  const swrFn = () => getSeveralTracks(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a list of the songs saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Tracks

 */
export const getUsersSavedTracks = (
    params?: GetUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetUsersSavedTracksKey = (params?: GetUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks`, ...(params ? [params]: [])] as const;

export type GetUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedTracks>>>
export type GetUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Tracks

 */
export const useGetUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedTracksKey(params) : null);
  const swrFn = () => getUsersSavedTracks(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Save one or more tracks to the current user's 'Your Music' library.

 * @summary Save Tracks for Current User

 */
export const saveTracksUser = (
    saveTracksUserBody: SaveTracksUserBody,
    params: SaveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/tracks`,
      saveTracksUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getSaveTracksUserMutationFetcher = (params: SaveTracksUserParams, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: SaveTracksUserBody }): Promise<AxiosResponse<void>> => {
    return saveTracksUser(arg, params, options);
  }
}
export const getSaveTracksUserMutationKey = (params: SaveTracksUserParams,) => [`https://api.spotify.com/v1/me/tracks`, ...(params ? [params]: [])] as const;

export type SaveTracksUserMutationResult = NonNullable<Awaited<ReturnType<typeof saveTracksUser>>>
export type SaveTracksUserMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Save Tracks for Current User

 */
export const useSaveTracksUser = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: SaveTracksUserParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof saveTracksUser>>, TError, Key, SaveTracksUserBody, Awaited<ReturnType<typeof saveTracksUser>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSaveTracksUserMutationKey(params);
  const swrFn = getSaveTracksUserMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Remove one or more tracks from the current user's 'Your Music' library.

 * @summary Remove User's Saved Tracks

 */
export const removeTracksUser = (
    removeTracksUserBody: RemoveTracksUserBody,
    params: RemoveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/tracks`,{data:
      removeTracksUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getRemoveTracksUserMutationFetcher = (params: RemoveTracksUserParams, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: RemoveTracksUserBody }): Promise<AxiosResponse<void>> => {
    return removeTracksUser(arg, params, options);
  }
}
export const getRemoveTracksUserMutationKey = (params: RemoveTracksUserParams,) => [`https://api.spotify.com/v1/me/tracks`, ...(params ? [params]: [])] as const;

export type RemoveTracksUserMutationResult = NonNullable<Awaited<ReturnType<typeof removeTracksUser>>>
export type RemoveTracksUserMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Remove User's Saved Tracks

 */
export const useRemoveTracksUser = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: RemoveTracksUserParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof removeTracksUser>>, TError, Key, RemoveTracksUserBody, Awaited<ReturnType<typeof removeTracksUser>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRemoveTracksUserMutationKey(params);
  const swrFn = getRemoveTracksUserMutationFetcher(params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Tracks

 */
export const checkUsersSavedTracks = (
    params: CheckUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getCheckUsersSavedTracksKey = (params: CheckUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks/contains`, ...(params ? [params]: [])] as const;

export type CheckUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedTracks>>>
export type CheckUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Tracks

 */
export const useCheckUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: CheckUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedTracksKey(params) : null);
  const swrFn = () => checkUsersSavedTracks(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get audio features for multiple tracks based on their Spotify IDs.

 * @summary Get Tracks' Audio Features

 */
export const getSeveralAudioFeatures = (
    params: GetSeveralAudioFeaturesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyAudioFeaturesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-features`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetSeveralAudioFeaturesKey = (params: GetSeveralAudioFeaturesParams,) => [`https://api.spotify.com/v1/audio-features`, ...(params ? [params]: [])] as const;

export type GetSeveralAudioFeaturesQueryResult = NonNullable<Awaited<ReturnType<typeof getSeveralAudioFeatures>>>
export type GetSeveralAudioFeaturesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Tracks' Audio Features

 */
export const useGetSeveralAudioFeatures = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params: GetSeveralAudioFeaturesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSeveralAudioFeatures>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSeveralAudioFeaturesKey(params) : null);
  const swrFn = () => getSeveralAudioFeatures(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get audio feature information for a single track identified by its unique
Spotify ID.

 * @summary Get Track's Audio Features

 */
export const getAudioFeatures = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAudioFeaturesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-features/${id}`,options
    );
  }



export const getGetAudioFeaturesKey = (id: string,) => [`https://api.spotify.com/v1/audio-features/${id}`] as const;

export type GetAudioFeaturesQueryResult = NonNullable<Awaited<ReturnType<typeof getAudioFeatures>>>
export type GetAudioFeaturesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track's Audio Features

 */
export const useGetAudioFeatures = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudioFeatures>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudioFeaturesKey(id) : null);
  const swrFn = () => getAudioFeatures(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track‚Äôs structure and musical content, including rhythm, pitch, and timbre.

 * @summary Get Track's Audio Analysis

 */
export const getAudioAnalysis = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAudioAnalysisResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audio-analysis/${id}`,options
    );
  }



export const getGetAudioAnalysisKey = (id: string,) => [`https://api.spotify.com/v1/audio-analysis/${id}`] as const;

export type GetAudioAnalysisQueryResult = NonNullable<Awaited<ReturnType<typeof getAudioAnalysis>>>
export type GetAudioAnalysisQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Track's Audio Analysis

 */
export const useGetAudioAnalysis = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudioAnalysis>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudioAnalysisKey(id) : null);
  const swrFn = () => getAudioAnalysis(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.

For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.

 * @summary Get Recommendations

 */
export const getRecommendations = (
    params?: GetRecommendationsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneRecommendationsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/recommendations`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetRecommendationsKey = (params?: GetRecommendationsParams,) => [`https://api.spotify.com/v1/recommendations`, ...(params ? [params]: [])] as const;

export type GetRecommendationsQueryResult = NonNullable<Awaited<ReturnType<typeof getRecommendations>>>
export type GetRecommendationsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Recommendations

 */
export const useGetRecommendations = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetRecommendationsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getRecommendations>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetRecommendationsKey(params) : null);
  const swrFn = () => getRecommendations(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

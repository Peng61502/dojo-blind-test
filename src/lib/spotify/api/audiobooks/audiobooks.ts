/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ArrayOfBooleansResponse,
  BadRequestResponse,
  CheckUsersSavedAudiobooksParams,
  ForbiddenResponse,
  GetAnAudiobookParams,
  GetAudiobookChaptersParams,
  GetMultipleAudiobooksParams,
  GetUsersSavedAudiobooksParams,
  ManyAudiobooksResponse,
  NotFoundResponse,
  OneAudiobookResponse,
  PagingSavedAudiobookObjectResponse,
  PagingSimplifiedChapterObjectResponse,
  RemoveAudiobooksUserParams,
  SaveAudiobooksUserParams,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get Spotify catalog information for a single audiobook.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get an Audiobook

 */
export const getAnAudiobook = (
    id: string,
    params?: GetAnAudiobookParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAudiobookResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audiobooks/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnAudiobookKey = (id: string,
    params?: GetAnAudiobookParams,) => [`https://api.spotify.com/v1/audiobooks/${id}`, ...(params ? [params]: [])] as const;

    
export type GetAnAudiobookQueryResult = NonNullable<Awaited<ReturnType<typeof getAnAudiobook>>>
export type GetAnAudiobookQueryError = AxiosError<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse>

/**
 * @summary Get an Audiobook

 */
export const useGetAnAudiobook = <TError = AxiosError<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnAudiobookParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnAudiobook>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnAudiobookKey(id,params) : null);
  const swrFn = () => getAnAudiobook(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Several Audiobooks

 */
export const getMultipleAudiobooks = (
    params: GetMultipleAudiobooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyAudiobooksResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audiobooks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMultipleAudiobooksKey = (params: GetMultipleAudiobooksParams,) => [`https://api.spotify.com/v1/audiobooks`, ...(params ? [params]: [])] as const;

    
export type GetMultipleAudiobooksQueryResult = NonNullable<Awaited<ReturnType<typeof getMultipleAudiobooks>>>
export type GetMultipleAudiobooksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Audiobooks

 */
export const useGetMultipleAudiobooks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetMultipleAudiobooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getMultipleAudiobooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetMultipleAudiobooksKey(params) : null);
  const swrFn = () => getMultipleAudiobooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an audiobook's chapters.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Audiobook Chapters

 */
export const getAudiobookChapters = (
    id: string,
    params?: GetAudiobookChaptersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSimplifiedChapterObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audiobooks/${id}/chapters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAudiobookChaptersKey = (id: string,
    params?: GetAudiobookChaptersParams,) => [`https://api.spotify.com/v1/audiobooks/${id}/chapters`, ...(params ? [params]: [])] as const;

    
export type GetAudiobookChaptersQueryResult = NonNullable<Awaited<ReturnType<typeof getAudiobookChapters>>>
export type GetAudiobookChaptersQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Audiobook Chapters

 */
export const useGetAudiobookChapters = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAudiobookChaptersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudiobookChapters>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudiobookChaptersKey(id,params) : null);
  const swrFn = () => getAudiobookChapters(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Audiobooks

 */
export const getUsersSavedAudiobooks = (
    params?: GetUsersSavedAudiobooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedAudiobookObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/audiobooks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedAudiobooksKey = (params?: GetUsersSavedAudiobooksParams,) => [`https://api.spotify.com/v1/me/audiobooks`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedAudiobooksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAudiobooks>>>
export type GetUsersSavedAudiobooksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Audiobooks

 */
export const useGetUsersSavedAudiobooks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedAudiobooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedAudiobooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedAudiobooksKey(params) : null);
  const swrFn = () => getUsersSavedAudiobooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more audiobooks to the current Spotify user's library.

 * @summary Save Audiobooks for Current User

 */
export const saveAudiobooksUser = (
    params: SaveAudiobooksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/audiobooks`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more audiobooks from the Spotify user's library.

 * @summary Remove User's Saved Audiobooks

 */
export const removeAudiobooksUser = (
    params: RemoveAudiobooksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/audiobooks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more audiobooks are already saved in the current Spotify user's library.

 * @summary Check User's Saved Audiobooks

 */
export const checkUsersSavedAudiobooks = (
    params: CheckUsersSavedAudiobooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/audiobooks/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedAudiobooksKey = (params: CheckUsersSavedAudiobooksParams,) => [`https://api.spotify.com/v1/me/audiobooks/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedAudiobooksQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAudiobooks>>>
export type CheckUsersSavedAudiobooksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Audiobooks

 */
export const useCheckUsersSavedAudiobooks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedAudiobooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedAudiobooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedAudiobooksKey(params) : null);
  const swrFn = () => checkUsersSavedAudiobooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


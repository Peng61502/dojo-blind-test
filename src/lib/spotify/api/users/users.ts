/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ArrayOfBooleansResponse,
  CheckCurrentUserFollowsParams,
  CheckIfUserFollowsPlaylistParams,
  CursorPagedArtistsResponse,
  FollowArtistsUsersBody,
  FollowArtistsUsersParams,
  FollowPlaylistBody,
  ForbiddenResponse,
  GetFollowedParams,
  GetListUsersPlaylistsParams,
  GetUsersTopArtistsParams,
  GetUsersTopTracksParams,
  OnePrivateUserResponse,
  OnePublicUserResponse,
  PagedPlaylistsResponse,
  PagingArtistObjectResponse,
  PagingTrackObjectResponse,
  TooManyRequestsResponse,
  UnauthorizedResponse,
  UnfollowArtistsUsersBody,
  UnfollowArtistsUsersParams
} from '../../model'


  
  /**
 * Get detailed profile information about the current user (including the
current user's username).

 * @summary Get Current User's Profile

 */
export const getCurrentUsersProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OnePrivateUserResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me`,options
    );
  }


export const getGetCurrentUsersProfileKey = () => [`https://api.spotify.com/v1/me`] as const;

    
export type GetCurrentUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUsersProfile>>>
export type GetCurrentUsersProfileQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Current User's Profile

 */
export const useGetCurrentUsersProfile = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getCurrentUsersProfile>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetCurrentUsersProfileKey() : null);
  const swrFn = () => getCurrentUsersProfile(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get public profile information about a Spotify user.

 * @summary Get User's Profile

 */
export const getUsersProfile = (
    userId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OnePublicUserResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/users/${userId}`,options
    );
  }


export const getGetUsersProfileKey = (userId: string,) => [`https://api.spotify.com/v1/users/${userId}`] as const;

    
export type GetUsersProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersProfile>>>
export type GetUsersProfileQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Profile

 */
export const useGetUsersProfile = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 userId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersProfile>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersProfileKey(userId) : null);
  const swrFn = () => getUsersProfile(userId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the playlists owned or followed by a Spotify user.

 * @summary Get User's Playlists

 */
export const getListUsersPlaylists = (
    userId: string,
    params?: GetListUsersPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/users/${userId}/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetListUsersPlaylistsKey = (userId: string,
    params?: GetListUsersPlaylistsParams,) => [`https://api.spotify.com/v1/users/${userId}/playlists`, ...(params ? [params]: [])] as const;

    
export type GetListUsersPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getListUsersPlaylists>>>
export type GetListUsersPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Playlists

 */
export const useGetListUsersPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 userId: string,
    params?: GetListUsersPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getListUsersPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetListUsersPlaylistsKey(userId,params) : null);
  const swrFn = () => getListUsersPlaylists(userId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Add the current user as a follower of a playlist.

 * @summary Follow Playlist

 */
export const followPlaylist = (
    playlistId: string,
    followPlaylistBody: FollowPlaylistBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}/followers`,
      followPlaylistBody,options
    );
  }


/**
 * Remove the current user as a follower of a playlist.

 * @summary Unfollow Playlist

 */
export const unfollowPlaylist = (
    playlistId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/playlists/${playlistId}/followers`,options
    );
  }


/**
 * Get the current user's followed artists.

 * @summary Get Followed Artists

 */
export const getFollowed = (
    params: GetFollowedParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CursorPagedArtistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFollowedKey = (params: GetFollowedParams,) => [`https://api.spotify.com/v1/me/following`, ...(params ? [params]: [])] as const;

    
export type GetFollowedQueryResult = NonNullable<Awaited<ReturnType<typeof getFollowed>>>
export type GetFollowedQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Followed Artists

 */
export const useGetFollowed = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetFollowedParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFollowed>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFollowedKey(params) : null);
  const swrFn = () => getFollowed(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Add the current user as a follower of one or more artists or other Spotify users.

 * @summary Follow Artists or Users

 */
export const followArtistsUsers = (
    followArtistsUsersBody: FollowArtistsUsersBody,
    params: FollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/following`,
      followArtistsUsersBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove the current user as a follower of one or more artists or other Spotify users.

 * @summary Unfollow Artists or Users

 */
export const unfollowArtistsUsers = (
    unfollowArtistsUsersBody: UnfollowArtistsUsersBody,
    params: UnfollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/following`,{data:
      unfollowArtistsUsersBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check to see if the current user is following one or more artists or other Spotify users.

 * @summary Check If User Follows Artists or Users

 */
export const checkCurrentUserFollows = (
    params: CheckCurrentUserFollowsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckCurrentUserFollowsKey = (params: CheckCurrentUserFollowsParams,) => [`https://api.spotify.com/v1/me/following/contains`, ...(params ? [params]: [])] as const;

    
export type CheckCurrentUserFollowsQueryResult = NonNullable<Awaited<ReturnType<typeof checkCurrentUserFollows>>>
export type CheckCurrentUserFollowsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check If User Follows Artists or Users

 */
export const useCheckCurrentUserFollows = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckCurrentUserFollowsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkCurrentUserFollows>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckCurrentUserFollowsKey(params) : null);
  const swrFn = () => checkCurrentUserFollows(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Check to see if one or more Spotify users are following a specified playlist.

 * @summary Check if Users Follow Playlist

 */
export const checkIfUserFollowsPlaylist = (
    playlistId: string,
    params: CheckIfUserFollowsPlaylistParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}/followers/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckIfUserFollowsPlaylistKey = (playlistId: string,
    params: CheckIfUserFollowsPlaylistParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}/followers/contains`, ...(params ? [params]: [])] as const;

    
export type CheckIfUserFollowsPlaylistQueryResult = NonNullable<Awaited<ReturnType<typeof checkIfUserFollowsPlaylist>>>
export type CheckIfUserFollowsPlaylistQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check if Users Follow Playlist

 */
export const useCheckIfUserFollowsPlaylist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 playlistId: string,
    params: CheckIfUserFollowsPlaylistParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkIfUserFollowsPlaylist>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(playlistId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckIfUserFollowsPlaylistKey(playlistId,params) : null);
  const swrFn = () => checkIfUserFollowsPlaylist(playlistId,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top artists based on calculated affinity.

 * @summary Get User's Top Artists

 */
export const getUsersTopArtists = (
    params?: GetUsersTopArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingArtistObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopArtistsKey = (params?: GetUsersTopArtistsParams,) => [`https://api.spotify.com/v1/me/top/artists`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopArtists>>>
export type GetUsersTopArtistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Artists

 */
export const useGetUsersTopArtists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopArtistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopArtists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopArtistsKey(params) : null);
  const swrFn = () => getUsersTopArtists(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top tracks based on calculated affinity.

 * @summary Get User's Top Tracks

 */
export const getUsersTopTracks = (
    params?: GetUsersTopTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopTracksKey = (params?: GetUsersTopTracksParams,) => [`https://api.spotify.com/v1/me/top/tracks`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopTracks>>>
export type GetUsersTopTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Tracks

 */
export const useGetUsersTopTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopTracksKey(params) : null);
  const swrFn = () => getUsersTopTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


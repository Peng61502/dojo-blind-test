/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ForbiddenResponse,
  GetAChapterParams,
  GetAudiobookChaptersParams,
  GetSeveralChaptersParams,
  ManyChaptersResponse,
  OneChapterResponse,
  PagingSimplifiedChapterObjectResponse,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get Spotify catalog information about an audiobook's chapters.<br />
**Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Audiobook Chapters

 */
export const getAudiobookChapters = (
    id: string,
    params?: GetAudiobookChaptersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSimplifiedChapterObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/audiobooks/${id}/chapters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAudiobookChaptersKey = (id: string,
    params?: GetAudiobookChaptersParams,) => [`https://api.spotify.com/v1/audiobooks/${id}/chapters`, ...(params ? [params]: [])] as const;

    
export type GetAudiobookChaptersQueryResult = NonNullable<Awaited<ReturnType<typeof getAudiobookChapters>>>
export type GetAudiobookChaptersQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Audiobook Chapters

 */
export const useGetAudiobookChapters = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAudiobookChaptersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAudiobookChapters>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAudiobookChaptersKey(id,params) : null);
  const swrFn = () => getAudiobookChapters(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for a single chapter.<br />
**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get a Chapter

 */
export const getAChapter = (
    id: string,
    params?: GetAChapterParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneChapterResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/chapters/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAChapterKey = (id: string,
    params?: GetAChapterParams,) => [`https://api.spotify.com/v1/chapters/${id}`, ...(params ? [params]: [])] as const;

    
export type GetAChapterQueryResult = NonNullable<Awaited<ReturnType<typeof getAChapter>>>
export type GetAChapterQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get a Chapter

 */
export const useGetAChapter = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAChapterParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAChapter>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAChapterKey(id,params) : null);
  const swrFn = () => getAChapter(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for several chapters identified by their Spotify IDs.<br />
**Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**

 * @summary Get Several Chapters

 */
export const getSeveralChapters = (
    params: GetSeveralChaptersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyChaptersResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/chapters`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetSeveralChaptersKey = (params: GetSeveralChaptersParams,) => [`https://api.spotify.com/v1/chapters`, ...(params ? [params]: [])] as const;

    
export type GetSeveralChaptersQueryResult = NonNullable<Awaited<ReturnType<typeof getSeveralChapters>>>
export type GetSeveralChaptersQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Chapters

 */
export const useGetSeveralChapters = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetSeveralChaptersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSeveralChapters>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSeveralChaptersKey(params) : null);
  const swrFn = () => getSeveralChapters(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


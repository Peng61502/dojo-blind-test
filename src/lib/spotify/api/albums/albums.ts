/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ArrayOfBooleansResponse,
  CheckUsersSavedAlbumsParams,
  ForbiddenResponse,
  GetAnAlbumParams,
  GetAnAlbumsTracksParams,
  GetAnArtistsAlbumsParams,
  GetMultipleAlbumsParams,
  GetNewReleasesParams,
  GetUsersSavedAlbumsParams,
  ManyAlbumsResponse,
  OneAlbumResponse,
  PagedAlbumsResponse,
  PagingArtistDiscographyAlbumObjectResponse,
  PagingSavedAlbumObjectResponse,
  PagingSimplifiedTrackObjectResponse,
  RemoveAlbumsUserBody,
  RemoveAlbumsUserParams,
  SaveAlbumsUserBody,
  SaveAlbumsUserParams,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get Spotify catalog information for a single album.

 * @summary Get Album

 */
export const getAnAlbum = (
    id: string,
    params?: GetAnAlbumParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OneAlbumResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/albums/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnAlbumKey = (id: string,
    params?: GetAnAlbumParams,) => [`https://api.spotify.com/v1/albums/${id}`, ...(params ? [params]: [])] as const;

    
export type GetAnAlbumQueryResult = NonNullable<Awaited<ReturnType<typeof getAnAlbum>>>
export type GetAnAlbumQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Album

 */
export const useGetAnAlbum = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnAlbumParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnAlbum>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnAlbumKey(id,params) : null);
  const swrFn = () => getAnAlbum(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information for multiple albums identified by their Spotify IDs.

 * @summary Get Several Albums

 */
export const getMultipleAlbums = (
    params: GetMultipleAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ManyAlbumsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMultipleAlbumsKey = (params: GetMultipleAlbumsParams,) => [`https://api.spotify.com/v1/albums`, ...(params ? [params]: [])] as const;

    
export type GetMultipleAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof getMultipleAlbums>>>
export type GetMultipleAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Several Albums

 */
export const useGetMultipleAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetMultipleAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getMultipleAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetMultipleAlbumsKey(params) : null);
  const swrFn = () => getMultipleAlbums(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an album‚Äôs tracks.
Optional parameters can be used to limit the number of tracks returned.

 * @summary Get Album Tracks

 */
export const getAnAlbumsTracks = (
    id: string,
    params?: GetAnAlbumsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSimplifiedTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/albums/${id}/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnAlbumsTracksKey = (id: string,
    params?: GetAnAlbumsTracksParams,) => [`https://api.spotify.com/v1/albums/${id}/tracks`, ...(params ? [params]: [])] as const;

    
export type GetAnAlbumsTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getAnAlbumsTracks>>>
export type GetAnAlbumsTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Album Tracks

 */
export const useGetAnAlbumsTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnAlbumsTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnAlbumsTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnAlbumsTracksKey(id,params) : null);
  const swrFn = () => getAnAlbumsTracks(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get Spotify catalog information about an artist's albums.

 * @summary Get Artist's Albums

 */
export const getAnArtistsAlbums = (
    id: string,
    params?: GetAnArtistsAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingArtistDiscographyAlbumObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/artists/${id}/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAnArtistsAlbumsKey = (id: string,
    params?: GetAnArtistsAlbumsParams,) => [`https://api.spotify.com/v1/artists/${id}/albums`, ...(params ? [params]: [])] as const;

    
export type GetAnArtistsAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof getAnArtistsAlbums>>>
export type GetAnArtistsAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Artist's Albums

 */
export const useGetAnArtistsAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 id: string,
    params?: GetAnArtistsAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAnArtistsAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAnArtistsAlbumsKey(id,params) : null);
  const swrFn = () => getAnArtistsAlbums(id,params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the albums saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Albums

 */
export const getUsersSavedAlbums = (
    params?: GetUsersSavedAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedAlbumObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedAlbumsKey = (params?: GetUsersSavedAlbumsParams,) => [`https://api.spotify.com/v1/me/albums`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAlbums>>>
export type GetUsersSavedAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Albums

 */
export const useGetUsersSavedAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedAlbumsKey(params) : null);
  const swrFn = () => getUsersSavedAlbums(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more albums to the current user's 'Your Music' library.

 * @summary Save Albums for Current User

 */
export const saveAlbumsUser = (
    saveAlbumsUserBody: SaveAlbumsUserBody,
    params: SaveAlbumsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/albums`,
      saveAlbumsUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more albums from the current user's 'Your Music' library.

 * @summary Remove Users' Saved Albums

 */
export const removeAlbumsUser = (
    removeAlbumsUserBody: RemoveAlbumsUserBody,
    params: RemoveAlbumsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/albums`,{data:
      removeAlbumsUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Albums

 */
export const checkUsersSavedAlbums = (
    params: CheckUsersSavedAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/albums/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedAlbumsKey = (params: CheckUsersSavedAlbumsParams,) => [`https://api.spotify.com/v1/me/albums/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAlbums>>>
export type CheckUsersSavedAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Albums

 */
export const useCheckUsersSavedAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedAlbumsKey(params) : null);
  const swrFn = () => checkUsersSavedAlbums(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player‚Äôs ‚ÄúBrowse‚Äù tab).

 * @summary Get New Releases

 */
export const getNewReleases = (
    params?: GetNewReleasesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedAlbumsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/new-releases`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetNewReleasesKey = (params?: GetNewReleasesParams,) => [`https://api.spotify.com/v1/browse/new-releases`, ...(params ? [params]: [])] as const;

    
export type GetNewReleasesQueryResult = NonNullable<Awaited<ReturnType<typeof getNewReleases>>>
export type GetNewReleasesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get New Releases

 */
export const useGetNewReleases = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetNewReleasesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getNewReleases>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetNewReleasesKey(params) : null);
  const swrFn = () => getNewReleases(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


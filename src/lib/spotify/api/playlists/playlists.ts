/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  AddTracksToPlaylistBody,
  AddTracksToPlaylistParams,
  ArrayOfImagesResponse,
  ChangePlaylistDetailsBody,
  CreatePlaylistBody,
  ForbiddenResponse,
  GetACategoriesPlaylistsParams,
  GetAListOfCurrentUsersPlaylistsParams,
  GetFeaturedPlaylistsParams,
  GetListUsersPlaylistsParams,
  GetPlaylistParams,
  GetPlaylistsTracksParams,
  OnePlaylistResponse,
  PagedFeaturedPlaylistsResponse,
  PagedPlaylistsResponse,
  PagingPlaylistTrackObjectResponse,
  PlaylistSnapshotIdResponse,
  RemoveTracksPlaylistBody,
  ReorderOrReplacePlaylistsTracksBody,
  ReorderOrReplacePlaylistsTracksParams,
  TooManyRequestsResponse,
  UnauthorizedResponse
} from '../../model'


  
  /**
 * Get a playlist owned by a Spotify user.

 * @summary Get Playlist

 */
export const getPlaylist = (
    playlistId: string,
    params?: GetPlaylistParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OnePlaylistResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetPlaylistKey = (playlistId: string,
    params?: GetPlaylistParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}`, ...(params ? [params]: [])] as const;

export type GetPlaylistQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaylist>>>
export type GetPlaylistQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Playlist

 */
export const useGetPlaylist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string,
    params?: GetPlaylistParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPlaylist>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(playlistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPlaylistKey(playlistId,params) : null);
  const swrFn = () => getPlaylist(playlistId,params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Change a playlist's name and public/private state. (The user must, of
course, own the playlist.)

 * @summary Change Playlist Details

 */
export const changePlaylistDetails = (
    playlistId: string,
    changePlaylistDetailsBody: ChangePlaylistDetailsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}`,
      changePlaylistDetailsBody,options
    );
  }



export const getChangePlaylistDetailsMutationFetcher = (playlistId: string, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: ChangePlaylistDetailsBody }): Promise<AxiosResponse<void>> => {
    return changePlaylistDetails(playlistId, arg, options);
  }
}
export const getChangePlaylistDetailsMutationKey = (playlistId: string,) => [`https://api.spotify.com/v1/playlists/${playlistId}`] as const;

export type ChangePlaylistDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof changePlaylistDetails>>>
export type ChangePlaylistDetailsMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Change Playlist Details

 */
export const useChangePlaylistDetails = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof changePlaylistDetails>>, TError, Key, ChangePlaylistDetailsBody, Awaited<ReturnType<typeof changePlaylistDetails>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getChangePlaylistDetailsMutationKey(playlistId);
  const swrFn = getChangePlaylistDetailsMutationFetcher(playlistId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get full details of the items of a playlist owned by a Spotify user.

 * @summary Get Playlist Items

 */
export const getPlaylistsTracks = (
    playlistId: string,
    params?: GetPlaylistsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingPlaylistTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetPlaylistsTracksKey = (playlistId: string,
    params?: GetPlaylistsTracksParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, ...(params ? [params]: [])] as const;

export type GetPlaylistsTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaylistsTracks>>>
export type GetPlaylistsTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Playlist Items

 */
export const useGetPlaylistsTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string,
    params?: GetPlaylistsTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPlaylistsTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(playlistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPlaylistsTracksKey(playlistId,params) : null);
  const swrFn = () => getPlaylistsTracks(playlistId,params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Add one or more items to a user's playlist.

 * @summary Add Items to Playlist

 */
export const addTracksToPlaylist = (
    playlistId: string,
    addTracksToPlaylistBody: AddTracksToPlaylistBody,
    params?: AddTracksToPlaylistParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.post(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      addTracksToPlaylistBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getAddTracksToPlaylistMutationFetcher = (playlistId: string,
    params?: AddTracksToPlaylistParams, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: AddTracksToPlaylistBody }): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return addTracksToPlaylist(playlistId, arg, params, options);
  }
}
export const getAddTracksToPlaylistMutationKey = (playlistId: string,
    params?: AddTracksToPlaylistParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, ...(params ? [params]: [])] as const;

export type AddTracksToPlaylistMutationResult = NonNullable<Awaited<ReturnType<typeof addTracksToPlaylist>>>
export type AddTracksToPlaylistMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Add Items to Playlist

 */
export const useAddTracksToPlaylist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string,
    params?: AddTracksToPlaylistParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof addTracksToPlaylist>>, TError, Key, AddTracksToPlaylistBody, Awaited<ReturnType<typeof addTracksToPlaylist>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getAddTracksToPlaylistMutationKey(playlistId,params);
  const swrFn = getAddTracksToPlaylistMutationFetcher(playlistId,params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Either reorder or replace items in a playlist depending on the request's parameters.
To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
To replace items, include `uris` as either a query parameter or in the request's body.
Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
<br/>
**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
These operations can't be applied together in a single request.

 * @summary Update Playlist Items

 */
export const reorderOrReplacePlaylistsTracks = (
    playlistId: string,
    reorderOrReplacePlaylistsTracksBody: ReorderOrReplacePlaylistsTracksBody,
    params?: ReorderOrReplacePlaylistsTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      reorderOrReplacePlaylistsTracksBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getReorderOrReplacePlaylistsTracksMutationFetcher = (playlistId: string,
    params?: ReorderOrReplacePlaylistsTracksParams, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: ReorderOrReplacePlaylistsTracksBody }): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return reorderOrReplacePlaylistsTracks(playlistId, arg, params, options);
  }
}
export const getReorderOrReplacePlaylistsTracksMutationKey = (playlistId: string,
    params?: ReorderOrReplacePlaylistsTracksParams,) => [`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, ...(params ? [params]: [])] as const;

export type ReorderOrReplacePlaylistsTracksMutationResult = NonNullable<Awaited<ReturnType<typeof reorderOrReplacePlaylistsTracks>>>
export type ReorderOrReplacePlaylistsTracksMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Update Playlist Items

 */
export const useReorderOrReplacePlaylistsTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string,
    params?: ReorderOrReplacePlaylistsTracksParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof reorderOrReplacePlaylistsTracks>>, TError, Key, ReorderOrReplacePlaylistsTracksBody, Awaited<ReturnType<typeof reorderOrReplacePlaylistsTracks>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getReorderOrReplacePlaylistsTracksMutationKey(playlistId,params);
  const swrFn = getReorderOrReplacePlaylistsTracksMutationFetcher(playlistId,params, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Remove one or more items from a user's playlist.

 * @summary Remove Playlist Items

 */
export const removeTracksPlaylist = (
    playlistId: string,
    removeTracksPlaylistBody: RemoveTracksPlaylistBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return axios.delete(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,{data:
      removeTracksPlaylistBody, ...options}
    );
  }



export const getRemoveTracksPlaylistMutationFetcher = (playlistId: string, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: RemoveTracksPlaylistBody }): Promise<AxiosResponse<PlaylistSnapshotIdResponse>> => {
    return removeTracksPlaylist(playlistId, arg, options);
  }
}
export const getRemoveTracksPlaylistMutationKey = (playlistId: string,) => [`https://api.spotify.com/v1/playlists/${playlistId}/tracks`] as const;

export type RemoveTracksPlaylistMutationResult = NonNullable<Awaited<ReturnType<typeof removeTracksPlaylist>>>
export type RemoveTracksPlaylistMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Remove Playlist Items

 */
export const useRemoveTracksPlaylist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof removeTracksPlaylist>>, TError, Key, RemoveTracksPlaylistBody, Awaited<ReturnType<typeof removeTracksPlaylist>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getRemoveTracksPlaylistMutationKey(playlistId);
  const swrFn = getRemoveTracksPlaylistMutationFetcher(playlistId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a list of the playlists owned or followed by the current Spotify
user.

 * @summary Get Current User's Playlists

 */
export const getAListOfCurrentUsersPlaylists = (
    params?: GetAListOfCurrentUsersPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetAListOfCurrentUsersPlaylistsKey = (params?: GetAListOfCurrentUsersPlaylistsParams,) => [`https://api.spotify.com/v1/me/playlists`, ...(params ? [params]: [])] as const;

export type GetAListOfCurrentUsersPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getAListOfCurrentUsersPlaylists>>>
export type GetAListOfCurrentUsersPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Current User's Playlists

 */
export const useGetAListOfCurrentUsersPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetAListOfCurrentUsersPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAListOfCurrentUsersPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAListOfCurrentUsersPlaylistsKey(params) : null);
  const swrFn = () => getAListOfCurrentUsersPlaylists(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a list of the playlists owned or followed by a Spotify user.

 * @summary Get User's Playlists

 */
export const getListUsersPlaylists = (
    userId: string,
    params?: GetListUsersPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/users/${userId}/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetListUsersPlaylistsKey = (userId: string,
    params?: GetListUsersPlaylistsParams,) => [`https://api.spotify.com/v1/users/${userId}/playlists`, ...(params ? [params]: [])] as const;

export type GetListUsersPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getListUsersPlaylists>>>
export type GetListUsersPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Playlists

 */
export const useGetListUsersPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  userId: string,
    params?: GetListUsersPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getListUsersPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(userId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetListUsersPlaylistsKey(userId,params) : null);
  const swrFn = () => getListUsersPlaylists(userId,params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Create a playlist for a Spotify user. (The playlist will be empty until
you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
Each user is generally limited to a maximum of 11000 playlists.

 * @summary Create Playlist

 */
export const createPlaylist = (
    userId: string,
    createPlaylistBody: CreatePlaylistBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OnePlaylistResponse>> => {
    return axios.post(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      createPlaylistBody,options
    );
  }



export const getCreatePlaylistMutationFetcher = (userId: string, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: CreatePlaylistBody }): Promise<AxiosResponse<OnePlaylistResponse>> => {
    return createPlaylist(userId, arg, options);
  }
}
export const getCreatePlaylistMutationKey = (userId: string,) => [`https://api.spotify.com/v1/users/${userId}/playlists`] as const;

export type CreatePlaylistMutationResult = NonNullable<Awaited<ReturnType<typeof createPlaylist>>>
export type CreatePlaylistMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Create Playlist

 */
export const useCreatePlaylist = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  userId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createPlaylist>>, TError, Key, CreatePlaylistBody, Awaited<ReturnType<typeof createPlaylist>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreatePlaylistMutationKey(userId);
  const swrFn = getCreatePlaylistMutationFetcher(userId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).

 * @summary Get Featured Playlists

 */
export const getFeaturedPlaylists = (
    params?: GetFeaturedPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedFeaturedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/featured-playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetFeaturedPlaylistsKey = (params?: GetFeaturedPlaylistsParams,) => [`https://api.spotify.com/v1/browse/featured-playlists`, ...(params ? [params]: [])] as const;

export type GetFeaturedPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getFeaturedPlaylists>>>
export type GetFeaturedPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Featured Playlists

 */
export const useGetFeaturedPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  params?: GetFeaturedPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFeaturedPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFeaturedPlaylistsKey(params) : null);
  const swrFn = () => getFeaturedPlaylists(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get a list of Spotify playlists tagged with a particular category.

 * @summary Get Category's Playlists

 */
export const getACategoriesPlaylists = (
    categoryId: string,
    params?: GetACategoriesPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedFeaturedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/browse/categories/${categoryId}/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetACategoriesPlaylistsKey = (categoryId: string,
    params?: GetACategoriesPlaylistsParams,) => [`https://api.spotify.com/v1/browse/categories/${categoryId}/playlists`, ...(params ? [params]: [])] as const;

export type GetACategoriesPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getACategoriesPlaylists>>>
export type GetACategoriesPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Category's Playlists

 */
export const useGetACategoriesPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  categoryId: string,
    params?: GetACategoriesPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getACategoriesPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(categoryId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetACategoriesPlaylistsKey(categoryId,params) : null);
  const swrFn = () => getACategoriesPlaylists(categoryId,params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get the current image associated with a specific playlist.

 * @summary Get Playlist Cover Image

 */
export const getPlaylistCover = (
    playlistId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfImagesResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}/images`,options
    );
  }



export const getGetPlaylistCoverKey = (playlistId: string,) => [`https://api.spotify.com/v1/playlists/${playlistId}/images`] as const;

export type GetPlaylistCoverQueryResult = NonNullable<Awaited<ReturnType<typeof getPlaylistCover>>>
export type GetPlaylistCoverQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Playlist Cover Image

 */
export const useGetPlaylistCover = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getPlaylistCover>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(playlistId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetPlaylistCoverKey(playlistId) : null);
  const swrFn = () => getPlaylistCover(playlistId, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Replace the image used to represent a specific playlist.

 * @summary Add Custom Playlist Cover Image

 */
export const uploadCustomPlaylistCover = (
    playlistId: string,
    uploadCustomPlaylistCoverBody: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}/images`,
      uploadCustomPlaylistCoverBody,options
    );
  }



export const getUploadCustomPlaylistCoverMutationFetcher = (playlistId: string, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: string }): Promise<AxiosResponse<void>> => {
    return uploadCustomPlaylistCover(playlistId, arg, options);
  }
}
export const getUploadCustomPlaylistCoverMutationKey = (playlistId: string,) => [`https://api.spotify.com/v1/playlists/${playlistId}/images`] as const;

export type UploadCustomPlaylistCoverMutationResult = NonNullable<Awaited<ReturnType<typeof uploadCustomPlaylistCover>>>
export type UploadCustomPlaylistCoverMutationError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Add Custom Playlist Cover Image

 */
export const useUploadCustomPlaylistCover = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
  playlistId: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof uploadCustomPlaylistCover>>, TError, Key, string, Awaited<ReturnType<typeof uploadCustomPlaylistCover>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getUploadCustomPlaylistCoverMutationKey(playlistId);
  const swrFn = getUploadCustomPlaylistCoverMutationFetcher(playlistId, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Spotify Web API with fixes and improvements from sonallux
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.

In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/">OAuth 2.0</a>.

The base URI for all Web API requests is `https://api.spotify.com/v1`.

Need help? See our <a href="https://developer.spotify.com/documentation/web-api/guides/">Web API guides</a> for more information, or visit the <a href="https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer">Spotify for Developers community forum</a> to ask questions and connect with other developers.

 * OpenAPI spec version: 2023.8.30
 */
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  ArrayOfBooleansResponse,
  ChangePlaylistDetailsBody,
  CheckCurrentUserFollowsParams,
  CheckUsersSavedAlbumsParams,
  CheckUsersSavedAudiobooksParams,
  CheckUsersSavedEpisodesParams,
  CheckUsersSavedShowsParams,
  CheckUsersSavedTracksParams,
  CreatePlaylistBody,
  CursorPagedArtistsResponse,
  FollowArtistsUsersBody,
  FollowArtistsUsersParams,
  ForbiddenResponse,
  GetAListOfCurrentUsersPlaylistsParams,
  GetFollowedParams,
  GetUsersSavedAlbumsParams,
  GetUsersSavedAudiobooksParams,
  GetUsersSavedEpisodesParams,
  GetUsersSavedShowsParams,
  GetUsersSavedTracksParams,
  GetUsersTopArtistsParams,
  GetUsersTopTracksParams,
  OnePlaylistResponse,
  PagedPlaylistsResponse,
  PagingArtistObjectResponse,
  PagingSavedAlbumObjectResponse,
  PagingSavedAudiobookObjectResponse,
  PagingSavedEpisodeObjectResponse,
  PagingSavedShowObjectResponse,
  PagingSavedTrackObjectResponse,
  PagingTrackObjectResponse,
  RemoveAlbumsUserBody,
  RemoveAlbumsUserParams,
  RemoveAudiobooksUserParams,
  RemoveEpisodesUserBody,
  RemoveEpisodesUserParams,
  RemoveShowsUserBody,
  RemoveShowsUserParams,
  RemoveTracksUserBody,
  RemoveTracksUserParams,
  SaveAlbumsUserBody,
  SaveAlbumsUserParams,
  SaveAudiobooksUserParams,
  SaveEpisodesUserBody,
  SaveEpisodesUserParams,
  SaveShowsUserBody,
  SaveShowsUserParams,
  SaveTracksUserBody,
  SaveTracksUserParams,
  TooManyRequestsResponse,
  UnauthorizedResponse,
  UnfollowArtistsUsersBody,
  UnfollowArtistsUsersParams
} from '../../model'


  
  /**
 * Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Audiobooks

 */
export const getUsersSavedAudiobooks = (
    params?: GetUsersSavedAudiobooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedAudiobookObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/audiobooks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedAudiobooksKey = (params?: GetUsersSavedAudiobooksParams,) => [`https://api.spotify.com/v1/me/audiobooks`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedAudiobooksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAudiobooks>>>
export type GetUsersSavedAudiobooksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Audiobooks

 */
export const useGetUsersSavedAudiobooks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedAudiobooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedAudiobooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedAudiobooksKey(params) : null);
  const swrFn = () => getUsersSavedAudiobooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more audiobooks to the current Spotify user's library.

 * @summary Save Audiobooks for Current User

 */
export const saveAudiobooksUser = (
    params: SaveAudiobooksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/audiobooks`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more audiobooks from the Spotify user's library.

 * @summary Remove User's Saved Audiobooks

 */
export const removeAudiobooksUser = (
    params: RemoveAudiobooksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/audiobooks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more audiobooks are already saved in the current Spotify user's library.

 * @summary Check User's Saved Audiobooks

 */
export const checkUsersSavedAudiobooks = (
    params: CheckUsersSavedAudiobooksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/audiobooks/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedAudiobooksKey = (params: CheckUsersSavedAudiobooksParams,) => [`https://api.spotify.com/v1/me/audiobooks/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedAudiobooksQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAudiobooks>>>
export type CheckUsersSavedAudiobooksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Audiobooks

 */
export const useCheckUsersSavedAudiobooks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedAudiobooksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedAudiobooks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedAudiobooksKey(params) : null);
  const swrFn = () => checkUsersSavedAudiobooks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Change a playlist's name and public/private state. (The user must, of
course, own the playlist.)

 * @summary Change Playlist Details

 */
export const changePlaylistDetails = (
    playlistId: string,
    changePlaylistDetailsBody: ChangePlaylistDetailsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/playlists/${playlistId}`,
      changePlaylistDetailsBody,options
    );
  }


/**
 * Get a list of the playlists owned or followed by the current Spotify
user.

 * @summary Get Current User's Playlists

 */
export const getAListOfCurrentUsersPlaylists = (
    params?: GetAListOfCurrentUsersPlaylistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagedPlaylistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/playlists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAListOfCurrentUsersPlaylistsKey = (params?: GetAListOfCurrentUsersPlaylistsParams,) => [`https://api.spotify.com/v1/me/playlists`, ...(params ? [params]: [])] as const;

    
export type GetAListOfCurrentUsersPlaylistsQueryResult = NonNullable<Awaited<ReturnType<typeof getAListOfCurrentUsersPlaylists>>>
export type GetAListOfCurrentUsersPlaylistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Current User's Playlists

 */
export const useGetAListOfCurrentUsersPlaylists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetAListOfCurrentUsersPlaylistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAListOfCurrentUsersPlaylists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAListOfCurrentUsersPlaylistsKey(params) : null);
  const swrFn = () => getAListOfCurrentUsersPlaylists(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the albums saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Albums

 */
export const getUsersSavedAlbums = (
    params?: GetUsersSavedAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedAlbumObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedAlbumsKey = (params?: GetUsersSavedAlbumsParams,) => [`https://api.spotify.com/v1/me/albums`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedAlbums>>>
export type GetUsersSavedAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Albums

 */
export const useGetUsersSavedAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedAlbumsKey(params) : null);
  const swrFn = () => getUsersSavedAlbums(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more albums to the current user's 'Your Music' library.

 * @summary Save Albums for Current User

 */
export const saveAlbumsUser = (
    saveAlbumsUserBody: SaveAlbumsUserBody,
    params: SaveAlbumsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/albums`,
      saveAlbumsUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more albums from the current user's 'Your Music' library.

 * @summary Remove Users' Saved Albums

 */
export const removeAlbumsUser = (
    removeAlbumsUserBody: RemoveAlbumsUserBody,
    params: RemoveAlbumsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/albums`,{data:
      removeAlbumsUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Albums

 */
export const checkUsersSavedAlbums = (
    params: CheckUsersSavedAlbumsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/albums/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedAlbumsKey = (params: CheckUsersSavedAlbumsParams,) => [`https://api.spotify.com/v1/me/albums/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedAlbumsQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedAlbums>>>
export type CheckUsersSavedAlbumsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Albums

 */
export const useCheckUsersSavedAlbums = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedAlbumsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedAlbums>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedAlbumsKey(params) : null);
  const swrFn = () => checkUsersSavedAlbums(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the songs saved in the current Spotify user's 'Your Music' library.

 * @summary Get User's Saved Tracks

 */
export const getUsersSavedTracks = (
    params?: GetUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedTracksKey = (params?: GetUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedTracks>>>
export type GetUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Tracks

 */
export const useGetUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedTracksKey(params) : null);
  const swrFn = () => getUsersSavedTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more tracks to the current user's 'Your Music' library.

 * @summary Save Tracks for Current User

 */
export const saveTracksUser = (
    saveTracksUserBody: SaveTracksUserBody,
    params: SaveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/tracks`,
      saveTracksUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more tracks from the current user's 'Your Music' library.

 * @summary Remove User's Saved Tracks

 */
export const removeTracksUser = (
    removeTracksUserBody: RemoveTracksUserBody,
    params: RemoveTracksUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/tracks`,{data:
      removeTracksUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.

 * @summary Check User's Saved Tracks

 */
export const checkUsersSavedTracks = (
    params: CheckUsersSavedTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/tracks/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedTracksKey = (params: CheckUsersSavedTracksParams,) => [`https://api.spotify.com/v1/me/tracks/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedTracksQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedTracks>>>
export type CheckUsersSavedTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Tracks

 */
export const useCheckUsersSavedTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedTracksKey(params) : null);
  const swrFn = () => checkUsersSavedTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of the episodes saved in the current Spotify user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Get User's Saved Episodes

 */
export const getUsersSavedEpisodes = (
    params?: GetUsersSavedEpisodesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedEpisodeObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/episodes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedEpisodesKey = (params?: GetUsersSavedEpisodesParams,) => [`https://api.spotify.com/v1/me/episodes`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedEpisodesQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedEpisodes>>>
export type GetUsersSavedEpisodesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Episodes

 */
export const useGetUsersSavedEpisodes = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedEpisodesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedEpisodes>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedEpisodesKey(params) : null);
  const swrFn = () => getUsersSavedEpisodes(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more episodes to the current user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Save Episodes for Current User

 */
export const saveEpisodesUser = (
    saveEpisodesUserBody: SaveEpisodesUserBody,
    params: SaveEpisodesUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/episodes`,
      saveEpisodesUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove one or more episodes from the current user's library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).

 * @summary Remove User's Saved Episodes

 */
export const removeEpisodesUser = (
    removeEpisodesUserBody: RemoveEpisodesUserBody,
    params: RemoveEpisodesUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/episodes`,{data:
      removeEpisodesUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..

 * @summary Check User's Saved Episodes

 */
export const checkUsersSavedEpisodes = (
    params: CheckUsersSavedEpisodesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/episodes/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedEpisodesKey = (params: CheckUsersSavedEpisodesParams,) => [`https://api.spotify.com/v1/me/episodes/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedEpisodesQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedEpisodes>>>
export type CheckUsersSavedEpisodesQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Episodes

 */
export const useCheckUsersSavedEpisodes = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedEpisodesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedEpisodes>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedEpisodesKey(params) : null);
  const swrFn = () => checkUsersSavedEpisodes(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.

 * @summary Get User's Saved Shows

 */
export const getUsersSavedShows = (
    params?: GetUsersSavedShowsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingSavedShowObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/shows`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersSavedShowsKey = (params?: GetUsersSavedShowsParams,) => [`https://api.spotify.com/v1/me/shows`, ...(params ? [params]: [])] as const;

    
export type GetUsersSavedShowsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersSavedShows>>>
export type GetUsersSavedShowsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Saved Shows

 */
export const useGetUsersSavedShows = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersSavedShowsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersSavedShows>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersSavedShowsKey(params) : null);
  const swrFn = () => getUsersSavedShows(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Save one or more shows to current Spotify user's library.

 * @summary Save Shows for Current User

 */
export const saveShowsUser = (
    saveShowsUserBody: SaveShowsUserBody,
    params: SaveShowsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/shows`,
      saveShowsUserBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Delete one or more shows from current Spotify user's library.

 * @summary Remove User's Saved Shows

 */
export const removeShowsUser = (
    removeShowsUserBody: RemoveShowsUserBody,
    params: RemoveShowsUserParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/shows`,{data:
      removeShowsUserBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check if one or more shows is already saved in the current Spotify user's library.

 * @summary Check User's Saved Shows

 */
export const checkUsersSavedShows = (
    params: CheckUsersSavedShowsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/shows/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckUsersSavedShowsKey = (params: CheckUsersSavedShowsParams,) => [`https://api.spotify.com/v1/me/shows/contains`, ...(params ? [params]: [])] as const;

    
export type CheckUsersSavedShowsQueryResult = NonNullable<Awaited<ReturnType<typeof checkUsersSavedShows>>>
export type CheckUsersSavedShowsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check User's Saved Shows

 */
export const useCheckUsersSavedShows = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckUsersSavedShowsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkUsersSavedShows>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckUsersSavedShowsKey(params) : null);
  const swrFn = () => checkUsersSavedShows(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Create a playlist for a Spotify user. (The playlist will be empty until
you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
Each user is generally limited to a maximum of 11000 playlists.

 * @summary Create Playlist

 */
export const createPlaylist = (
    userId: string,
    createPlaylistBody: CreatePlaylistBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OnePlaylistResponse>> => {
    return axios.post(
      `https://api.spotify.com/v1/users/${userId}/playlists`,
      createPlaylistBody,options
    );
  }


/**
 * Get the current user's followed artists.

 * @summary Get Followed Artists

 */
export const getFollowed = (
    params: GetFollowedParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CursorPagedArtistsResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFollowedKey = (params: GetFollowedParams,) => [`https://api.spotify.com/v1/me/following`, ...(params ? [params]: [])] as const;

    
export type GetFollowedQueryResult = NonNullable<Awaited<ReturnType<typeof getFollowed>>>
export type GetFollowedQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get Followed Artists

 */
export const useGetFollowed = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: GetFollowedParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFollowed>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFollowedKey(params) : null);
  const swrFn = () => getFollowed(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Add the current user as a follower of one or more artists or other Spotify users.

 * @summary Follow Artists or Users

 */
export const followArtistsUsers = (
    followArtistsUsersBody: FollowArtistsUsersBody,
    params: FollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.put(
      `https://api.spotify.com/v1/me/following`,
      followArtistsUsersBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Remove the current user as a follower of one or more artists or other Spotify users.

 * @summary Unfollow Artists or Users

 */
export const unfollowArtistsUsers = (
    unfollowArtistsUsersBody: UnfollowArtistsUsersBody,
    params: UnfollowArtistsUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `https://api.spotify.com/v1/me/following`,{data:
      unfollowArtistsUsersBody, 
    ...options,
        params: {...params, ...options?.params},}
    );
  }


/**
 * Check to see if the current user is following one or more artists or other Spotify users.

 * @summary Check If User Follows Artists or Users

 */
export const checkCurrentUserFollows = (
    params: CheckCurrentUserFollowsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArrayOfBooleansResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/following/contains`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCheckCurrentUserFollowsKey = (params: CheckCurrentUserFollowsParams,) => [`https://api.spotify.com/v1/me/following/contains`, ...(params ? [params]: [])] as const;

    
export type CheckCurrentUserFollowsQueryResult = NonNullable<Awaited<ReturnType<typeof checkCurrentUserFollows>>>
export type CheckCurrentUserFollowsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Check If User Follows Artists or Users

 */
export const useCheckCurrentUserFollows = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params: CheckCurrentUserFollowsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkCurrentUserFollows>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckCurrentUserFollowsKey(params) : null);
  const swrFn = () => checkCurrentUserFollows(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top artists based on calculated affinity.

 * @summary Get User's Top Artists

 */
export const getUsersTopArtists = (
    params?: GetUsersTopArtistsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingArtistObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/artists`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopArtistsKey = (params?: GetUsersTopArtistsParams,) => [`https://api.spotify.com/v1/me/top/artists`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopArtistsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopArtists>>>
export type GetUsersTopArtistsQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Artists

 */
export const useGetUsersTopArtists = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopArtistsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopArtists>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopArtistsKey(params) : null);
  const swrFn = () => getUsersTopArtists(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Get the current user's top tracks based on calculated affinity.

 * @summary Get User's Top Tracks

 */
export const getUsersTopTracks = (
    params?: GetUsersTopTracksParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PagingTrackObjectResponse>> => {
    return axios.get(
      `https://api.spotify.com/v1/me/top/tracks`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetUsersTopTracksKey = (params?: GetUsersTopTracksParams,) => [`https://api.spotify.com/v1/me/top/tracks`, ...(params ? [params]: [])] as const;

    
export type GetUsersTopTracksQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersTopTracks>>>
export type GetUsersTopTracksQueryError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>

/**
 * @summary Get User's Top Tracks

 */
export const useGetUsersTopTracks = <TError = AxiosError<UnauthorizedResponse | ForbiddenResponse | TooManyRequestsResponse>>(
 params?: GetUsersTopTracksParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsersTopTracks>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersTopTracksKey(params) : null);
  const swrFn = () => getUsersTopTracks(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

